/*
# Emulation Test Scenarios

Note: These assume the database is initially empty!

Using optional Disruptions in the http call, we can inject emulated failures at multiple levels to verify that the flow is managed appropriately. The Flow manager library takes care of the details, only requiring that the activities themselves correctly distinguish between fatal and non-fatal errors.

This allows us to implement Flow Managed Durable Functions with a high degree of confidence.

*/
/*
When Disruptions are detected, the base options are preset to minimal values to expedite testing. Otherwise the options are based on the activity flags. The last three flags can be used in combinations: the leftmost true value applies. Disrupted overwrites all, and default is simply without any other flag. These are, at the time of writing:
Setting|Disrupted|Default|HighMemory|LongRunning|HighDataOrFile
--|--|--|--|--|--
Number of Retries  |1      |5        |10        |10         |5
Initial Delay      |2 min  |5 min    |10 min    |8 min      |10 min       
Backoff Coefficient|1.0x   |2.0x     |1.4141x   |1.4141x    |2x    
Max Delay          |3 hr   |3 hr     |3 hr      |3 hr       |3 hr
Timeout            |10 min |2 hr     |6 hr      |12 hr      |8 hr

*/
/*

*/
/*
![alt text](image.png)
*/
/*
## Happy path running in parallel

Three records with Unique Keys. Each takes a minute or so to complete.
*/
/*
## Happy Path operations running in parallel
*/
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Normal_operation_should_finish_successfully", 
    "uniqueKey":"1001"
}
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"normal_operation_should_finish_successfully", 
    "uniqueKey":"1002"
}
### 
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Normal_operation_should_finish_successfully", 
    "uniqueKey":"1003"
}
/*
## Redundant call

A call with the same unique key as a finished operation is rejected as redundant.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Redundant_operation_call_should_be_ignored", 
    "uniqueKey":"1003"
}
/*
## Metadata access

If the metadata calls before or after the activity fail, these are handled through the Durable Function retry mechanism with default settings. 
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Wait_should_inject_a_metadata_failure", 
    "uniqueKey":"2010",
    "disruptions":[
        "Wait"
    ]
}
/*
## Crash

Crash injects an orchestration exception. An exception at the orchestrator level is handled by the Azure Function framework. 
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Crash_should_inject_orchestrator_exception", 
    "uniqueKey":"2011",
    "disruptions":[
        "",
        "Crash" 
    ]
}
/*
## Pass

Pass allows an activity to complete successfully. This can be injected at earlier activities to inject disruptions in later activities. This is also the default for an empty disruption.

In the example below:

- the first should pass because the value is empty, 
- the second because it is explicitly "Pass", 
- the third because it will use default, which is also Pass.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Pass_explicit_or_implied_allows_activities_to_complete_successfully", 
    "uniqueKey":"2011",
    "disruptions":[
        "",
        "Pass" 
    ]
}
/*
## Choke

Resources (Memory, Cpu or Disk Space) can be restricted, resulting in the orchestration being deferred. 

Activities sensitive to those particular restrictions may have different detection thresholds. Statistical information gathered at run time may help to tune these requirements.

In this case the second activity will be deferred because of restricted resources.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Choke_should_inject_resource_depletion", 
    "uniqueKey":"2012",
    "disruptions":[
        "",
        "Choke"
    ]
}
/*
## Stall

A non-fatal exception occurs in the activity. The retry policy will be adjusted according to the constants options selected in each sub-orchestration: 

- longRunning      if the activity can be expected to run for a long time
- highMemory       if a significant amount of free memory is required 
- highDataOrFile   if the activity is IO-intensive

*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Stall_should_inject_non_fatal_error_in_activity", 
    "uniqueKey":"2013",
    "disruptions":[
        "Pass",
        "Stall"
    ]
}
/*
## Fail

A fatal exception occurs in the activity. This will bubble up to the durable framework and be reported as an exception.

In this case the second activity of the operation throws the exception.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Fail_should_inject_fatal_error_in_activity", 
    "uniqueKey":"2014",
    "disruptions":[
        "Pass",
        "Fail"
    ]
}
/*
## Drag

An activity takes a very long time, but not long enough for the orchestration to time out. 

This opens the door for re-entrant calls, which should be treated as redundant and ignored.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Drag_should_inject_long_running_activity", 
    "uniqueKey":"2015",
    "disruptions":[
        "Drag"
    ]
}
/*
_Wait long enough for the activity to have become active, but not enough time for it to have completed or timed out_

Then try to launch the same operation, which should be treated as redundant.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"redundant_call_during_drag_should_become_redundant", 
    "uniqueKey":"2015",
}
/*
## Stick

An activity takes so long that it exceeds the Orchestration timeout period. 

A new instance should start (unless capped). 
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Stick_should_inject_activity_timeout", 
    "uniqueKey":"2016",
    "disruptions":[
        "Stick"
    ]
}