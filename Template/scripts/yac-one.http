/*
# Generate test cases 

Assuming that the database is clear, these notes apply.

**Initially happy path. Thre records with Unique Keys.**
Each takes a minute or so to complete.
*/
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Zulu", 
    "uniqueKey":"1000"
}
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Zulu", 
    "uniqueKey":"1001"
}
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Zulu", 
    "uniqueKey":"1003"
}
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Zulu", 
    "uniqueKey":"1003"
}
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Wait_should_inject_a_metadata_failure", 
    "uniqueKey":"2010",
    "disruptions":[
        "Wait"
    ]
}
/*
## Crash

Inject an exception at the orchestrator level. This will be handled by the Azure Function framework.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"crash_should_inject_orchestrator_exception", 
    "uniqueKey":"2011",
    "disruptions":[
        "",
        "Crash" 
    ]
}
/*
## Pass

Passes can be injected at earlier activities to emulate later failures. This is the default for an empty disruption.

In this example 

- the first should pass because the value is empty, 
- the second because it is "Pass", 
- the third because it will use default, which is also Pass.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"crash_should_inject_orchestrator_exception", 
    "uniqueKey":"2011",
    "disruptions":[
        "",
        "Pass" 
    ]
}
/*
## Choke

Resources can be restricted resulting in the orchestration being deferred. 

In this emulation the second activity will be deferred because of restricted resources.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Chokle_should_inject_resource_depletion", 
    "uniqueKey":"2012",
    "disruptions":[
        "",
        "Choke"
    ]
}
/*
## Stall

A non-fatal exception occurs in the activity. This will be retried according to the policy set by the options selected n the orchestration. 
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Stall_should_inject_non_fatal_error_in_activity", 
    "uniqueKey":"2013",
    "disruptions":[
        "Pass",
        "Stall"
    ]
}
/*
## Fail

A fatal exception occurs in the activity. This will bubble up to the durable framework and be reported as an exception.

In this case the second activity of the operation throws the exception.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Fail_should_inject_fatal_error_in_activity", 
    "uniqueKey":"2014",
    "disruptions":[
        "Pass",
        "Fail"
    ]
}
/*
## Drag

An activity takes a very long time, but not long enough for the orchestration to time out. 

This opens the door for re-entrant calls, which should be detected as redundant.
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Drag_should_inject_long_running_activity", 
    "uniqueKey":"2015",
    "disruptions":[
        "Drag"
    ]
}
/*
## Stick

An activity takes so long that it exceeds the Orchestration timeout period. 

A new instance should start (unless capped). 
*/
###
POST http://localhost:7071/api/OrchestrationZulu_HttpStart HTTP/1.1
Content-Type: application/json

{
    "name":"Stick_should_inject_activity_timeout", 
    "uniqueKey":"2016",
    "disruptions":[
        "Stick"
    ]
}